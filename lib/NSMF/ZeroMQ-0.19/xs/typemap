# Do NOT edit this file! This file was automatically generated
# by Makefile.PL on Wed Jan 11 07:20:34 2012. If you want to
# regenerate it, remove this file and re-run Makefile.PL

TYPEMAP

PerlZMQ_Raw_Context* T_PERLZMQ_RAW_CONTEXT
PerlZMQ_Raw_Socket* T_PERLZMQ_RAW_SOCKET
PerlZMQ_Raw_Message* T_PERLZMQ_RAW_MESSAGE


INPUT

T_PERLZMQ_RAW_CONTEXT
    {
        MAGIC *mg;
        $var = NULL;
        if (sv_isobject($arg)) {
            mg = PerlZMQ_Raw_Context_mg_find(aTHX_ SvRV($arg), &PerlZMQ_Raw_Context_vtbl);
            if (mg) {
                $var = (PerlZMQ_Raw_Context *) mg->mg_ptr;
            }
        }

        if ($var == NULL)
            croak(\"Invalid ZeroMQ::Raw::Context object (perhaps you've already freed it?)\");
    }

T_PERLZMQ_RAW_SOCKET
    {
        MAGIC *mg;
        $var = NULL;
        if (sv_isobject($arg)) {
            mg = PerlZMQ_Raw_Socket_mg_find(aTHX_ SvRV($arg), &PerlZMQ_Raw_Socket_vtbl);
            if (mg) {
                $var = (PerlZMQ_Raw_Socket *) mg->mg_ptr;
            }
        }

        if ($var == NULL)
            croak(\"Invalid ZeroMQ::Raw::Socket object (perhaps you've already freed it?)\");
    }

T_PERLZMQ_RAW_MESSAGE
    {
        MAGIC *mg;
        $var = NULL;
        if (sv_isobject($arg)) {
            mg = PerlZMQ_Raw_Message_mg_find(aTHX_ SvRV($arg), &PerlZMQ_Raw_Message_vtbl);
            if (mg) {
                $var = (PerlZMQ_Raw_Message *) mg->mg_ptr;
            }
        }

        if ($var == NULL)
            croak(\"Invalid ZeroMQ::Raw::Message object (perhaps you've already freed it?)\");
    }



OUTPUT

T_PERLZMQ_RAW_CONTEXT
        if (!$var)          /* if null */
            SvOK_off($arg); /* then return as undef instead of reaf to undef */
        else {
            /* setup $arg as a ref to a blessed hash hv */
            MAGIC *mg;
            HV *hv = newHV();
            const char *classname = \"ZeroMQ::Raw::Context\";
            /* take (sub)class name to use from class_sv if appropriate */
            if (SvMAGICAL(class_sv))
                mg_get(class_sv);

            if (SvOK( class_sv ) && sv_derived_from(class_sv, classname ) ) {
                if(SvROK(class_sv) && SvOBJECT(SvRV(class_sv))) {
                    classname = sv_reftype(SvRV(class_sv), TRUE);
                } else {
                    classname = SvPV_nolen(class_sv);
                }
            }

            sv_setsv($arg, sv_2mortal(newRV_noinc((SV*)hv)));
            (void)sv_bless($arg, gv_stashpv(classname, TRUE));
            mg = sv_magicext((SV*)hv, NULL, PERL_MAGIC_ext, &PerlZMQ_Raw_Context_vtbl, (char*) $var, 0);
            mg->mg_flags |= MGf_DUP;
        }

T_PERLZMQ_RAW_SOCKET
        if (!$var)          /* if null */
            SvOK_off($arg); /* then return as undef instead of reaf to undef */
        else {
            /* setup $arg as a ref to a blessed hash hv */
            MAGIC *mg;
            HV *hv = newHV();
            const char *classname = \"ZeroMQ::Raw::Socket\";
            /* take (sub)class name to use from class_sv if appropriate */
            if (SvMAGICAL(class_sv))
                mg_get(class_sv);

            if (SvOK( class_sv ) && sv_derived_from(class_sv, classname ) ) {
                if(SvROK(class_sv) && SvOBJECT(SvRV(class_sv))) {
                    classname = sv_reftype(SvRV(class_sv), TRUE);
                } else {
                    classname = SvPV_nolen(class_sv);
                }
            }

            sv_setsv($arg, sv_2mortal(newRV_noinc((SV*)hv)));
            (void)sv_bless($arg, gv_stashpv(classname, TRUE));
            mg = sv_magicext((SV*)hv, NULL, PERL_MAGIC_ext, &PerlZMQ_Raw_Socket_vtbl, (char*) $var, 0);
            mg->mg_flags |= MGf_DUP;
        }

T_PERLZMQ_RAW_MESSAGE
        if (!$var)          /* if null */
            SvOK_off($arg); /* then return as undef instead of reaf to undef */
        else {
            /* setup $arg as a ref to a blessed hash hv */
            MAGIC *mg;
            HV *hv = newHV();
            const char *classname = \"ZeroMQ::Raw::Message\";
            /* take (sub)class name to use from class_sv if appropriate */
            if (SvMAGICAL(class_sv))
                mg_get(class_sv);

            if (SvOK( class_sv ) && sv_derived_from(class_sv, classname ) ) {
                if(SvROK(class_sv) && SvOBJECT(SvRV(class_sv))) {
                    classname = sv_reftype(SvRV(class_sv), TRUE);
                } else {
                    classname = SvPV_nolen(class_sv);
                }
            }

            sv_setsv($arg, sv_2mortal(newRV_noinc((SV*)hv)));
            (void)sv_bless($arg, gv_stashpv(classname, TRUE));
            mg = sv_magicext((SV*)hv, NULL, PERL_MAGIC_ext, &PerlZMQ_Raw_Message_vtbl, (char*) $var, 0);
            mg->mg_flags |= MGf_DUP;
        }


